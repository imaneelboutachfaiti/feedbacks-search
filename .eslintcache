[{"C:\\MyProjects\\feedbacks-search\\src\\index.tsx":"1","C:\\MyProjects\\feedbacks-search\\src\\reportWebVitals.ts":"2","C:\\MyProjects\\feedbacks-search\\src\\App.tsx":"3","C:\\MyProjects\\feedbacks-search\\src\\Components\\Input\\Input.tsx":"4","C:\\MyProjects\\feedbacks-search\\src\\Components\\Header\\Header.tsx":"5","C:\\MyProjects\\feedbacks-search\\src\\Components\\Data\\FetchFeedbacksData.tsx":"6","C:\\MyProjects\\feedbacks-search\\src\\Components\\Data\\FeedBacksData.ts":"7","C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\Ratingbutton.tsx":"8","C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\RatingButton.tsx":"9","C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\FindRating.ts":"10","C:\\MyProjects\\feedbacks-search\\src\\Components\\Device\\Device.tsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":2739,"mtime":1611085838979,"results":"15","hashOfConfig":"13"},{"size":552,"mtime":1611052093466,"results":"16","hashOfConfig":"13"},{"size":297,"mtime":1611052080470,"results":"17","hashOfConfig":"13"},{"size":2127,"mtime":1611086449526,"results":"18","hashOfConfig":"13"},{"size":231,"mtime":1610988437445,"results":"19","hashOfConfig":"13"},{"size":525,"mtime":1611083935171,"results":"20","hashOfConfig":"13"},{"size":477,"mtime":1610712158235,"results":"21","hashOfConfig":"13"},{"size":120,"mtime":1610643116625,"results":"22","hashOfConfig":"13"},{"size":582,"mtime":1611085831754,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1gsdm25",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\MyProjects\\feedbacks-search\\src\\index.tsx",[],["49","50"],"C:\\MyProjects\\feedbacks-search\\src\\reportWebVitals.ts",[],"C:\\MyProjects\\feedbacks-search\\src\\App.tsx",["51","52"],"import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Input from \"./Components/Input/Input\";\r\nimport Header from \"./Components/Header/Header\";\r\nimport RatingButton from \"./Components/Button/Ratingbutton\";\r\nimport FetchFeedbacksData from \"./Components/Data/FetchFeedbacksData\";\r\nimport Device from \"./Components/Device/Device\";\r\nimport smartPhone from \"./Components/Device/smartphone.svg\";\r\nimport monitor from \"./Components/Device/monitor.svg\";\r\n\r\nfunction App() {\r\n  const [criteria, setCriteria] = useState<string>(\"\");\r\n  const [ratings, setRatings] = useState<number[]>([]);\r\n  const [device, setDevice] = useState<\"MOBILE\" | \"DESKTOP\" | null>(null);\r\n\r\n  const onRatingClick = (rate: number) => {\r\n    ratings.includes(rate)\r\n      ? setRatings(ratings.filter((item) => item !== rate))\r\n      : setRatings(ratings.concat(rate));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"filter-section\">\r\n        <Input onChange={setCriteria} placeholder=\"Search here!\" />\r\n        <div className=\"ratings\">\r\n          <RatingButton\r\n            ratingValue={1}\r\n            onClick={onRatingClick}\r\n            selected={ratings.includes(1)}\r\n          />\r\n          <RatingButton\r\n            ratingValue={2}\r\n            onClick={onRatingClick}\r\n            selected={ratings.includes(2)}\r\n          />\r\n          <RatingButton\r\n            ratingValue={3}\r\n            onClick={onRatingClick}\r\n            selected={ratings.includes(3)}\r\n          />\r\n          <RatingButton\r\n            ratingValue={4}\r\n            onClick={onRatingClick}\r\n            selected={ratings.includes(4)}\r\n          />\r\n          <RatingButton\r\n            ratingValue={5}\r\n            onClick={onRatingClick}\r\n            selected={ratings.includes(5)}\r\n          />\r\n        </div>\r\n        <div className=\"devices\">\r\n          <Device\r\n            imgUrl={smartPhone}\r\n            type=\"MOBILE\"\r\n            onClick={setDevice}\r\n            selected={device == \"MOBILE\"}\r\n          />\r\n          <Device\r\n            imgUrl={monitor}\r\n            type=\"DESKTOP\"\r\n            onClick={setDevice}\r\n            selected={device == \"DESKTOP\"}\r\n          />\r\n        </div>\r\n      </div>\r\n      <table>\r\n        <thead className=\"table-header\">\r\n          <tr>\r\n            <th>Rating</th>\r\n            <th>Comment</th>\r\n            <th>platform</th>\r\n            <th>Browser</th>\r\n            <th>Device</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody className=\"table-content\">\r\n          <FetchFeedbacksData\r\n            criteria={criteria}\r\n            ratings={ratings}\r\n            device={device}\r\n          />\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\MyProjects\\feedbacks-search\\src\\Components\\Input\\Input.tsx",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Header\\Header.tsx",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Data\\FetchFeedbacksData.tsx",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Data\\FeedBacksData.ts",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\Ratingbutton.tsx",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\RatingButton.tsx",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Button\\FindRating.ts",[],"C:\\MyProjects\\feedbacks-search\\src\\Components\\Device\\Device.tsx",["53","54"],"import { type } from \"os\";\r\nimport { FC } from \"react\";\r\nimport \"./Device.css\";\r\n\r\ninterface props {\r\n  imgUrl: string;\r\n  type: \"MOBILE\" | \"DESKTOP\";\r\n  onClick: (value: \"MOBILE\" | \"DESKTOP\") => void;\r\n  selected: boolean;\r\n}\r\n\r\nconst Device: FC<props> = (props) => {\r\n  const handleClick = () => {\r\n    props.onClick(props.type);\r\n  };\r\n\r\n  const className = props.selected ? \" selected\" : \"\";\r\n  return (\r\n    <button className={\"device\" + className} onClick={handleClick}>\r\n      <img src={props.imgUrl} alt=\"device-image\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Device;\r\n",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":59,"column":30,"nodeType":"61","messageId":"62","endLine":59,"endColumn":32},{"ruleId":"59","severity":1,"message":"60","line":65,"column":30,"nodeType":"61","messageId":"62","endLine":65,"endColumn":32},{"ruleId":"63","severity":1,"message":"64","line":1,"column":10,"nodeType":"65","messageId":"66","endLine":1,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":20,"column":7,"nodeType":"69","endLine":20,"endColumn":52},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]